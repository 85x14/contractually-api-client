#!/usr/bin/env ruby

require 'slop'
require 'csv'
require 'steps'
require File.expand_path('../../lib/contractually', __FILE__)

opts = Slop.parse do |o|
  o.banner = "usage: create-contract [options] filename.csv"
  o.separator ""
  o.separator "A sample Contractually API client. Given a template and a csv, it creates a contract for each row in the csv. Each contract is filled in with values from the csv file provided. This is done by setting each field's value to the value of that row's column with the corresponding header. For example, if you have a field named 'Position Title', then its value will be filled in from the 'Position Title' column of the csv."
  o.separator ""
  o.separator "Required arguments:"
  o.string '--server', 'URL of Contractually server. Defaults to https://api.contractual.ly', default: 'https://api.contractual.ly'
  o.string '-t', '--token', 'Your Contractually API token'
  o.integer '-id', '--template', 'ID of the template to use as the source document. Obtain this from the Contractually URL: https://contractual.ly/templates/:id/edit'
  o.separator ""
  o.separator "Optional arguments:"
  o.null '--invite', 'Upon succesful contract creation, invite the user. Requires the source document to have the following (non-empty) columns: First Name, Last Name, Email Address'
  o.on '--help', 'Usage help' do
    puts o
    exit
  end
end

if opts.arguments.length == 0
  # Output help
  puts opts
  exit
end

raise "Must provide exactly one csv file." unless opts.arguments.length == 1

if opts[:invite]
  # Verify that the required headers are present before doing anything
  headers = CSV.read(opts.arguments[0], headers: true).headers

  raise "Must have a First Name column to invite a user" unless headers.include? "First Name"
  raise "Must have a Last Name column to invite a user" unless headers.include? "Last Name"
  raise "Must have an Email Address column to invite a user" unless headers.include? "Email Address"
end

CSV.foreach(opts.arguments[0], headers: true) do |row|
  api = Contractually::Api.new(opts[:server], opts[:token])

  step "Creating contract for #{row[0]} (##{$. - 1})", vital: true do
    @contract = Contractually::Contract.new(api, opts[:template])

    "Created contract #{@contract.contract_id}"
  end

  step "Filling in fields", vital: true do
    @contract.fill_fields(row)
  end

  if opts[:invite]
    raise "Cannot have a blank First Name column when inviting a user" if row["First Name"] == ""
    raise "Cannot have a blank Last Name column when inviting a user" if row["Last Name"] == ""
    raise "Cannot have a blank Email Address column when inviting a user" if row["Email Address"] == ""

    name = "#{row["First Name"]} #{row["Last Name"]}"
    step "Inviting #{name}", vital: true do
      Contractually::Invite.new(api, @contract, name, row["Email Address"])
    end
  end
end
