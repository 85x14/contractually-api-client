#!/usr/bin/env ruby

require 'slop'
require 'csv'
require 'steps'
require 'colored'
require File.expand_path('../../lib/contractually', __FILE__)

opts = Slop.parse do |o|
  o.banner = "usage: create-contract [options] filename.csv"
  o.separator ""
  o.separator "A sample Contractually API client. Given a template and a csv, it creates a contract for each row in the csv. Each contract is filled in with values from the csv file provided. This is done by setting each field's value to the value of that row's column with the corresponding header. For example, if you have a field named 'Position Title', then its value will be filled in from the 'Position Title' column of the csv."
  o.separator ""
  o.separator "Required arguments:"
  o.string '--server', 'URL of Contractually server. Defaults to https://api.contractual.ly', default: 'https://api.contractual.ly'
  o.string '-t', '--token', 'Your Contractually API token'
  o.integer '-id', '--template', 'ID of the template to use as the source document. Obtain this from the Contractually URL: https://contractual.ly/templates/:id/edit'
  o.separator ""
  o.separator "Optional arguments:"
  o.null '--invite', 'Upon succesful contract creation, invite the user. Requires the source document to have the following (non-empty) columns: First Name, Last Name, Email Address'
  o.on '--help', 'Usage help' do
    puts o
    exit
  end
end

if opts.arguments.length == 0
  # Output help
  puts opts
  exit
end

raise "Must provide exactly one csv file." unless opts.arguments.length == 1

api = Contractually::Api.new(opts[:server], opts[:token])
csv_headers = CSV.read(opts.arguments[0], headers: true, row_sep: :auto, encoding: 'windows-1251:utf-8').headers

if opts[:invite]
  # Verify that the required headers are present before doing anything
  raise "Must have a First Name column to invite a user" unless csv_headers.include? "First Name"
  raise "Must have a Last Name column to invite a user" unless csv_headers.include? "Last Name"
  raise "Must have an Email Address column to invite a user" unless csv_headers.include? "Email Address"
end

def verify_csv_headers!(api, template_field_names, csv_headers)
  unmapped_csv_headers = csv_headers.reject{ |header| template_field_names.include?(header) }
  unmapped_template_fields = template_field_names.reject{ |field_name| csv_headers.include?(field_name) }

  unless unmapped_csv_headers.empty? && unmapped_template_fields.empty?
    if unmapped_csv_headers.any?
      puts "These fields are headers in the CSV, but are not mapped to anything in the template:".red
      puts "\"#{unmapped_csv_headers.sort.join('", "')}\"".red
    end

    puts "\n" if unmapped_csv_headers.any? && unmapped_template_fields.any?

    if unmapped_template_fields.any?
      puts "These fields are fields in the template, but are not present in the CSV:".red
      puts "\"#{unmapped_template_fields.sort.join('", "')}\"".red
    end

    puts "\n"
    puts 'Please confirm that this is correct: [y\N] '.green

    confirmation = $stdin.gets.chomp

    unless confirmation.length > 0 && ["y", "Y"].include?(confirmation.chomp)
      abort("Fix the mapping and try again.")
    end
  end
end

template_field_names = Contractually::Template.new(api, opts[:template]).fields.map {|field| field["name"] }
verify_csv_headers!(api, template_field_names, csv_headers)

begin
  CSV.foreach(opts.arguments[0], headers: true, row_sep: :auto, skip_blanks: true, encoding: 'windows-1251:utf-8') do |row|
    @contract = Contractually::Contract.new(api)

    message = row.headers.include?("First Name") ? "for #{row["First Name"]} " : ""
    step "Creating contract #{message}(##{$. - 1})", vital: true do
      @contract.create_from_template(opts[:template])
      "Created contract #{@contract.contract_id}"
    end

    if row.headers.include?("Contract Title")
      step "Setting title", vital: true do
        @contract.set_title(row["Contract Title"])
      end
    end

    step "Filling in fields", vital: true do
      @contract.fill_fields(row)
    end

    if opts[:invite]
      raise "Cannot have a blank First Name column when inviting a user" if row["First Name"] == ""
      raise "Cannot have a blank Last Name column when inviting a user" if row["Last Name"] == ""
      raise "Cannot have a blank Email Address column when inviting a user" if row["Email Address"] == ""

      name = "#{row["First Name"]} #{row["Last Name"]}"
      step "Inviting #{name}", vital: true do
        Contractually::Invite.new(api, @contract, name, row["Email Address"])
      end
    end
  end
rescue Exception => e
  puts "Error: Exception while creating contract. Not all contracts have been created.".red
  puts "Note that re-running the script will re-create all contracts created so far.".red
  raise e
end
